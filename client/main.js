import './main.html';
import React from 'react';
import ReactDOM from 'react-dom';
import meteor from 'meteor/meteor';
import { Activities } from './../imports/api/activities';
import { Tracker } from 'meteor/tracker';
import moment from 'moment';

//let now = moment().format("h:mmA, ddd, MMM"); //moment().format("h:mmA, ddd, MMM Do");

// let playerName = e.target.playerName.value;
//

const handleSubmit = function (e) {
e.preventDefault();
let comment = e.target.playerName.value; // grab the comment
let last = Activities.findOne({}, {sort:{createdAt:-1}}) // return the latest document/row from the db
if (comment){ // if there is a comment in the text box form field update the document with it, preceded by a hyphen-space
Activities.update(last._id, {$set: {com: '- ' + comment}}); // Uses the shorter syntax where only the doc id forms 1st arg
e.target.playerName.value = ''; // set the comment box back to blank after use.
  }

  let time = e.target.time.value;

if (time) {   // if a time is entered use it instead of the time generated by the insert of today's datetime
  let now = new Date();
  let nowStr = now.toString();
  let month = now.getMonth(); // returns integer from 0 to 11;
  let realMonth = month + 1;
  let year = now.getFullYear();
  let date = now.getDate();
  let monthStr;
  let dateStr;

if (month <=8){ // 8 not 9 because we have to add 1 so 9 + 1 would be 10 which is already 2 digits
  monthStr = "0" + realMonth.toString(); // adds the leading 0 for single digit months
}
else {
  monthStr = realMonth.toString(); // leaves the double digit months without a leading 0
}

if (date <=9){ // likewise except no + 1 is required in the case of date
  dateStr = "0" + date.toString(); // adds the leading 0 for single digit date values
}
else {
  dateStr = date.toString(); // leaves the double digit dates without a leading 0
}

  let newDateString = year.toString() + "-" + monthStr + "-" + dateStr + "T" + time + ":00Z";

  // is now adding comments to last item only...

  Activities.update(last._id, {$set: {"createdAt": new Date(newDateString)}})

e.target.time.value = ''; // blank out time box for re-use
  }
};

const renderPlayers = function(playersList){
  return playersList.map(function(player){ //try: if the activity is the first of that date add a horizontal line before the first entry
    // or: if there is a value difference between the last entry (ie this one) and the one before it add a line
    let lastActivityDate = moment(player.createdAt).format("DD"); // day of month e.g. 6th for log entry
    let thisActivityDate = moment(new Date()).format("DD"); // day of month for today - for comparison in if statement below
    let today = moment(new Date()).format("DD");
    let Yesterday = today - 1;
// add a Yesterday as well...
// User requested a line between each day of the log. This is only possible if i can access the index of the item e.g. playersList[i]
// then we can say if (moment(playersList[i].createdAt).format("do") != moment(playersList[i+1].createdAt).format("do")) then do something
// in the return statement - like bold something
    if (lastActivityDate == thisActivityDate) // Add a Today flag to today's entries
    {
      return <p key={player._id} className="activity"><strong>Today</strong> - {moment(player.createdAt).format("h:mma")}: {player.activity} {player.com}

<button className="removeButton" onClick={() => Activities.remove({"_id": player._id})}>Remove Entry</button></p>

    }
    else if(lastActivityDate == Yesterday)
    {
      return <p key={player._id} className="activity"><b>Yesterday</b> - {moment(player.createdAt).format("h:mma")}: {player.activity} {player.com} </p>
    }
    else {
      return <p key={player._id} className="activity">{moment(player.createdAt).format("ddd DD hh:mmA MMM")}: {player.activity} {player.com} </p>
    }
    //



  });
}

Meteor.startup(function(){
  Tracker.autorun(function() {
const players = Activities.find({}, {sort: {createdAt:-1}, limit:50}).fetch();

  let title = 'Eleonore-Time';
  let name = 'Eleonore';
  let jsx = (
    <div className="wrapper">
      <div className="title-bar">
        <h1>{title}</h1>
        <p className="caption">Welcome to {name}Time</p>
        <p className="caption">Please log your activity</p>
      </div>


      <form onSubmit={handleSubmit} className="form">
        <input type="text" className="textBox" name="playerName" placeholder="Comment"/>
	<br></br><input type="time" name="time" className="timePicker"/>
        <br></br><button className="button button-colorGreen" onClick={() => Activities.insert({activity: 'Settled, No Feed', com: '', createdAt: new Date(), userName: 'Isabel'})}>
          Settled - NO Feed</button>
        <button className="button button-colorAmber" onClick={() => Activities.insert({activity: 'Settled, With Feed', com: '', createdAt: new Date(), userName: 'Isabel'})}>
          Settled -    Feed</button>
        <button className="button button-colorRed" onClick={() => Activities.insert({activity: 'Nappy Change', com: '', createdAt: new Date(), userName: 'Isabel'})}>
          Nappy Change</button>
        <button className="button button-colorBlue" onClick={() => Activities.insert({activity: 'Woke Up', com: '', createdAt: new Date(), userName: 'Isabel'})}>
            Woke Up</button>
	<button className="button button-colorYellow" onClick={() => Activities.insert({activity: 'Breast Fed', com: '', createdAt: new Date(), userName: 'Isabel'})}>
            Breast Fed</button>
	<button className="button button-colorPurple" onClick={() => Activities.insert({activity: 'Food', com: '', createdAt: new Date(), userName: 'Isabel'})}>
            Food</button>
      </form>

      {renderPlayers(players)}
    </div>
  );

  ReactDOM.render(jsx, document.getElementById('app'))

  });
});
